// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.phone.ecc.nano;

@SuppressWarnings("hiding")
public interface ProtobufEccData {

  public static final class EccInfo extends
      com.google.protobuf.nano.ExtendableMessageNano<EccInfo> {

    // enum Type
    public interface Type {
      public static final int TYPE_UNSPECIFIED = 0;
      public static final int POLICE = 1;
      public static final int AMBULANCE = 2;
      public static final int FIRE = 3;
      public static final int MARINE_GUARD = 4;
      public static final int MOUNTAIN_RESCUE = 5;
      public static final int MIEC = 6;
      public static final int AIEC = 7;
    }

    // enum Routing
    public interface Routing {
      public static final int UNKNOWN = 0;
      public static final int EMERGENCY = 1;
      public static final int NORMAL = 2;
    }

    private static volatile EccInfo[] _emptyArray;
    public static EccInfo[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new EccInfo[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string phone_number = 1;
    public java.lang.String phoneNumber;

    // repeated .ecc.EccInfo.Type types = 2 [packed = true];
    public int[] types;

    // optional .ecc.EccInfo.Routing routing = 3 [default = UNKNOWN];
    public int routing;

    // repeated string normal_routing_mncs = 4;
    public java.lang.String[] normalRoutingMncs;

    public EccInfo() {
      clear();
    }

    public EccInfo clear() {
      phoneNumber = "";
      types = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      routing = com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Routing.UNKNOWN;
      normalRoutingMncs = com.google.protobuf.nano.WireFormatNano.EMPTY_STRING_ARRAY;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.phoneNumber.equals("")) {
        output.writeString(1, this.phoneNumber);
      }
      if (this.types != null && this.types.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.types.length; i++) {
          int element = this.types[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        output.writeRawVarint32(18);
        output.writeRawVarint32(dataSize);
        for (int i = 0; i < this.types.length; i++) {
          output.writeRawVarint32(this.types[i]);
        }
      }
      if (this.routing != com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Routing.UNKNOWN) {
        output.writeInt32(3, this.routing);
      }
      if (this.normalRoutingMncs != null && this.normalRoutingMncs.length > 0) {
        for (int i = 0; i < this.normalRoutingMncs.length; i++) {
          java.lang.String element = this.normalRoutingMncs[i];
          if (element != null) {
            output.writeString(4, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.phoneNumber.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.phoneNumber);
      }
      if (this.types != null && this.types.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.types.length; i++) {
          int element = this.types[i];
          dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1;
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeRawVarint32Size(dataSize);
      }
      if (this.routing != com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Routing.UNKNOWN) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeInt32Size(3, this.routing);
      }
      if (this.normalRoutingMncs != null && this.normalRoutingMncs.length > 0) {
        int dataCount = 0;
        int dataSize = 0;
        for (int i = 0; i < this.normalRoutingMncs.length; i++) {
          java.lang.String element = this.normalRoutingMncs[i];
          if (element != null) {
            dataCount++;
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeStringSizeNoTag(element);
          }
        }
        size += dataSize;
        size += 1 * dataCount;
      }
      return size;
    }

    @Override
    public EccInfo mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.phoneNumber = input.readString();
            break;
          }
          case 16: {
            int length = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 16);
            int[] validValues = new int[length];
            int validCount = 0;
            for (int i = 0; i < length; i++) {
              if (i != 0) { // tag for first value already consumed.
                input.readTag();
              }
              int value = input.readInt32();
              switch (value) {
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.TYPE_UNSPECIFIED:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.POLICE:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.AMBULANCE:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.FIRE:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MARINE_GUARD:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MOUNTAIN_RESCUE:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MIEC:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.AIEC:
                  validValues[validCount++] = value;
                  break;
              }
            }
            if (validCount != 0) {
              int i = this.types == null ? 0 : this.types.length;
              if (i == 0 && validCount == validValues.length) {
                this.types = validValues;
              } else {
                int[] newArray = new int[i + validCount];
                if (i != 0) {
                  java.lang.System.arraycopy(this.types, 0, newArray, 0, i);
                }
                java.lang.System.arraycopy(validValues, 0, newArray, i, validCount);
                this.types = newArray;
              }
            }
            break;
          }
          case 18: {
            int bytes = input.readRawVarint32();
            int limit = input.pushLimit(bytes);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              switch (input.readInt32()) {
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.TYPE_UNSPECIFIED:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.POLICE:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.AMBULANCE:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.FIRE:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MARINE_GUARD:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MOUNTAIN_RESCUE:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MIEC:
                case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.AIEC:
                  arrayLength++;
                  break;
              }
            }
            if (arrayLength != 0) {
              input.rewindToPosition(startPos);
              int i = this.types == null ? 0 : this.types.length;
              int[] newArray = new int[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.types, 0, newArray, 0, i);
              }
              while (input.getBytesUntilLimit() > 0) {
                int value = input.readInt32();
                switch (value) {
                  case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.TYPE_UNSPECIFIED:
                  case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.POLICE:
                  case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.AMBULANCE:
                  case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.FIRE:
                  case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MARINE_GUARD:
                  case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MOUNTAIN_RESCUE:
                  case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.MIEC:
                  case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Type.AIEC:
                    newArray[i++] = value;
                    break;
                }
              }
              this.types = newArray;
            }
            input.popLimit(limit);
            break;
          }
          case 24: {
            int value = input.readInt32();
            switch (value) {
              case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Routing.UNKNOWN:
              case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Routing.EMERGENCY:
              case com.android.phone.ecc.nano.ProtobufEccData.EccInfo.Routing.NORMAL:
                this.routing = value;
                break;
            }
            break;
          }
          case 34: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 34);
            int i = this.normalRoutingMncs == null ? 0 : this.normalRoutingMncs.length;
            java.lang.String[] newArray = new java.lang.String[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.normalRoutingMncs, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readString();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readString();
            this.normalRoutingMncs = newArray;
            break;
          }
        }
      }
    }

    public static EccInfo parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new EccInfo(), data);
    }

    public static EccInfo parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new EccInfo().mergeFrom(input);
    }
  }

  public static final class CountryInfo extends
      com.google.protobuf.nano.ExtendableMessageNano<CountryInfo> {

    private static volatile CountryInfo[] _emptyArray;
    public static CountryInfo[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new CountryInfo[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional string iso_code = 1;
    public java.lang.String isoCode;

    // repeated .ecc.EccInfo eccs = 2;
    public com.android.phone.ecc.nano.ProtobufEccData.EccInfo[] eccs;

    // optional string ecc_fallback = 3;
    public java.lang.String eccFallback;

    // optional bool ignore_modem_config = 4 [default = false];
    public boolean ignoreModemConfig;

    public CountryInfo() {
      clear();
    }

    public CountryInfo clear() {
      isoCode = "";
      eccs = com.android.phone.ecc.nano.ProtobufEccData.EccInfo.emptyArray();
      eccFallback = "";
      ignoreModemConfig = false;
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (!this.isoCode.equals("")) {
        output.writeString(1, this.isoCode);
      }
      if (this.eccs != null && this.eccs.length > 0) {
        for (int i = 0; i < this.eccs.length; i++) {
          com.android.phone.ecc.nano.ProtobufEccData.EccInfo element = this.eccs[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      if (!this.eccFallback.equals("")) {
        output.writeString(3, this.eccFallback);
      }
      if (this.ignoreModemConfig != false) {
        output.writeBool(4, this.ignoreModemConfig);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (!this.isoCode.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(1, this.isoCode);
      }
      if (this.eccs != null && this.eccs.length > 0) {
        for (int i = 0; i < this.eccs.length; i++) {
          com.android.phone.ecc.nano.ProtobufEccData.EccInfo element = this.eccs[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      if (!this.eccFallback.equals("")) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeStringSize(3, this.eccFallback);
      }
      if (this.ignoreModemConfig != false) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeBoolSize(4, this.ignoreModemConfig);
      }
      return size;
    }

    @Override
    public CountryInfo mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            this.isoCode = input.readString();
            break;
          }
          case 18: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.eccs == null ? 0 : this.eccs.length;
            com.android.phone.ecc.nano.ProtobufEccData.EccInfo[] newArray =
                new com.android.phone.ecc.nano.ProtobufEccData.EccInfo[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.eccs, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.phone.ecc.nano.ProtobufEccData.EccInfo();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.phone.ecc.nano.ProtobufEccData.EccInfo();
            input.readMessage(newArray[i]);
            this.eccs = newArray;
            break;
          }
          case 26: {
            this.eccFallback = input.readString();
            break;
          }
          case 32: {
            this.ignoreModemConfig = input.readBool();
            break;
          }
        }
      }
    }

    public static CountryInfo parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new CountryInfo(), data);
    }

    public static CountryInfo parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new CountryInfo().mergeFrom(input);
    }
  }

  public static final class AllInfo extends
      com.google.protobuf.nano.ExtendableMessageNano<AllInfo> {

    private static volatile AllInfo[] _emptyArray;
    public static AllInfo[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new AllInfo[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional int32 revision = 1;
    public int revision;

    // repeated .ecc.CountryInfo countries = 2;
    public com.android.phone.ecc.nano.ProtobufEccData.CountryInfo[] countries;

    public AllInfo() {
      clear();
    }

    public AllInfo clear() {
      revision = 0;
      countries = com.android.phone.ecc.nano.ProtobufEccData.CountryInfo.emptyArray();
      unknownFieldData = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.revision != 0) {
        output.writeInt32(1, this.revision);
      }
      if (this.countries != null && this.countries.length > 0) {
        for (int i = 0; i < this.countries.length; i++) {
          com.android.phone.ecc.nano.ProtobufEccData.CountryInfo element = this.countries[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.revision != 0) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.revision);
      }
      if (this.countries != null && this.countries.length > 0) {
        for (int i = 0; i < this.countries.length; i++) {
          com.android.phone.ecc.nano.ProtobufEccData.CountryInfo element = this.countries[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      return size;
    }

    @Override
    public AllInfo mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!storeUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.revision = input.readInt32();
            break;
          }
          case 18: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.countries == null ? 0 : this.countries.length;
            com.android.phone.ecc.nano.ProtobufEccData.CountryInfo[] newArray =
                new com.android.phone.ecc.nano.ProtobufEccData.CountryInfo[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.countries, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.android.phone.ecc.nano.ProtobufEccData.CountryInfo();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.android.phone.ecc.nano.ProtobufEccData.CountryInfo();
            input.readMessage(newArray[i]);
            this.countries = newArray;
            break;
          }
        }
      }
    }

    public static AllInfo parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new AllInfo(), data);
    }

    public static AllInfo parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new AllInfo().mergeFrom(input);
    }
  }
}
